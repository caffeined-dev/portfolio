{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Documents\\\\caffeined-dev\\\\portfolio\\\\src\\\\routes\\\\games\\\\modules\\\\Emojijeweled\\\\emojijeweled.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Button } from 'react-bootstrap';\nimport './emojijeweled.scss';\nimport '../../../../css/mediaqueries.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLS = 10;\nconst ROWS = 10;\nconst EMOTES = [\"🍳\", \"🍞\", \"🍣\", \"🧁\", \"☕\", \"🥕\", \"🍑\", \"🍇\"];\nexport default function Emojijeweled() {\n  _s();\n\n  let [grid, setGrid] = useState([]);\n  let [time, setTime] = useState(60);\n  let [started, setStarted] = useState(false);\n  let [score, setScore] = useState(0);\n  useEffect(() => {\n    let timerId;\n\n    if (started) {\n      timerId = setInterval(() => {\n        setTime(time => time - 1);\n      }, 1000);\n    }\n\n    return () => clearInterval(timerId);\n  }, [time, started]);\n  useEffect(() => {\n    reset();\n  }, []);\n\n  function reset() {\n    setGrid(new Array(COLS).fill(0).map((v, i) => new Array(ROWS).fill(0).map((v, i) => EMOTES[Math.floor(Math.random() * EMOTES.length)])));\n    setStarted(false);\n    setScore(0);\n  }\n\n  function clickTile(r, c) {\n    let pts = floodfill(r, c, grid[r][c]);\n    setScore(score + pts);\n    refill();\n  }\n\n  function refill() {\n    for (let i = 0; i < ROWS; i++) {\n      for (let r = ROWS - 1; r >= 1; r--) {\n        for (let c = 0; c < COLS; c++) {\n          if (grid[r][c] === -1) {\n            grid[r][c] = grid[r - 1][c];\n            grid[r - 1][c] = -1;\n          }\n        }\n      }\n    }\n\n    for (let r = ROWS - 1; r >= 1; r--) {\n      for (let c = 0; c < COLS; c++) {\n        if (grid[r][c] === -1) {\n          grid[r][c] = EMOTES[Math.floor(Math.random() * EMOTES.length)];\n        }\n      }\n    }\n  }\n\n  function floodfill(r, c, value) {\n    if (r < 0 || c < 0 || r >= ROWS || c >= COLS) return 0;\n    if (grid[r][c] !== value) return 0;\n    grid[r][c] = -1;\n    return 1 + floodfill(r - 1, c, value) + floodfill(r + 1, c, value) + floodfill(r, c + 1, value) + floodfill(r, c - 1, value);\n  }\n\n  console.log(grid);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"media-width d-flex flex-column align-items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mb-5\",\n      children: \"Emoji-Jeweled\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Click on emojis to build up points. The more clumped up the better! Chain clumps of 3 or more for bonus points.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"My personal best is ____ points\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100 divider m-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"d-flex align-items-center justify-content-between mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-25\",\n        style: {\n          fontSize: '2em'\n        },\n        children: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '2em'\n        },\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), !started ? /*#__PURE__*/_jsxDEV(Button, {\n        className: \"w-25\",\n        variant: \"success\",\n        onClick: () => setStarted(true),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        className: \"w-25\",\n        variant: \"danger\",\n        onClick: () => reset(),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"d-flex flex-row flex-wrap\",\n      children: grid.map((val, r) => val.map((v, c) => /*#__PURE__*/_jsxDEV(Tile, {\n        emoji: v,\n        r: r,\n        c: c,\n        clickTile: clickTile\n      }, r + \",\" + c, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 57\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Emojijeweled, \"b4WHsuq0hQCmXEEKaNu718UkHEk=\");\n\n_c = Emojijeweled;\n\nfunction Tile({\n  emoji,\n  r,\n  c,\n  clickTile\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tile d-flex justify-content-center align-items-center\",\n    onClick: () => clickTile(r, c),\n    children: emoji\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = Tile;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Emojijeweled\");\n$RefreshReg$(_c2, \"Tile\");","map":{"version":3,"sources":["C:/Users/David/Documents/caffeined-dev/portfolio/src/routes/games/modules/Emojijeweled/emojijeweled.js"],"names":["React","useEffect","useState","Container","Button","COLS","ROWS","EMOTES","Emojijeweled","grid","setGrid","time","setTime","started","setStarted","score","setScore","timerId","setInterval","clearInterval","reset","Array","fill","map","v","i","Math","floor","random","length","clickTile","r","c","pts","floodfill","refill","value","console","log","fontSize","val","Tile","emoji"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Container, Button } from 'react-bootstrap';\r\nimport './emojijeweled.scss';\r\nimport '../../../../css/mediaqueries.scss';\r\n\r\nconst COLS = 10;\r\nconst ROWS = 10;\r\n\r\nconst EMOTES = [\"🍳\", \"🍞\", \"🍣\", \"🧁\", \"☕\", \"🥕\", \"🍑\", \"🍇\"];\r\n\r\nexport default function Emojijeweled() {\r\n\r\n    let [grid, setGrid] = useState([]);\r\n    let [time, setTime] = useState(60);\r\n    let [started, setStarted] = useState(false);\r\n    let [score, setScore] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let timerId;\r\n\r\n        if (started) {\r\n            timerId = setInterval(() => {\r\n                setTime(time => time - 1);\r\n            }, 1000);\r\n        }\r\n\r\n        return () => clearInterval(timerId);\r\n    }, [time, started])\r\n\r\n    useEffect(() => {\r\n        reset();\r\n    }, []);\r\n\r\n    function reset() {\r\n        setGrid(new Array(COLS).fill(0).map((v, i) => new Array(ROWS).fill(0).map((v, i) => EMOTES[Math.floor(Math.random() * EMOTES.length)])));\r\n        setStarted(false);\r\n        setScore(0);\r\n    }\r\n\r\n    function clickTile(r, c) {\r\n        let pts = floodfill(r, c, grid[r][c]);\r\n        setScore(score + pts);\r\n        refill();\r\n    }\r\n\r\n    function refill() {\r\n        for(let i = 0; i < ROWS; i++) {\r\n            for(let r = ROWS - 1; r >= 1; r--) {\r\n                for(let c = 0; c < COLS; c++) {\r\n                    if(grid[r][c] === -1) {\r\n                        grid[r][c] = grid[r-1][c];\r\n                        grid[r-1][c] = -1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for(let r = ROWS - 1; r >= 1; r--) {\r\n            for(let c = 0; c < COLS; c++) {\r\n                if(grid[r][c] === -1) {\r\n                    grid[r][c] = EMOTES[Math.floor(Math.random() * EMOTES.length)];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function floodfill(r, c, value) {\r\n        if (r < 0 || c < 0 || r >= ROWS || c >= COLS) return 0;\r\n        if (grid[r][c] !== value) return 0;\r\n        grid[r][c] = -1;\r\n      \r\n        return (\r\n          1 +\r\n          floodfill(r - 1, c, value) +\r\n          floodfill(r + 1, c, value) +\r\n          floodfill(r, c + 1, value) +\r\n          floodfill(r, c - 1, value)\r\n        );\r\n      }\r\n\r\n    console.log(grid);\r\n\r\n    return (\r\n        <Container className=\"media-width d-flex flex-column align-items-center\">\r\n            <h2 className=\"mb-5\">Emoji-Jeweled</h2>\r\n            <p>Click on emojis to build up points. The more clumped up the better! Chain clumps of 3 or more for bonus points.</p>\r\n            <p>My personal best is ____ points</p>\r\n            <div className=\"w-100 divider m-3\" />\r\n            <Container fluid className=\"d-flex align-items-center justify-content-between mb-3\">\r\n                <div className=\"w-25\" style={{ fontSize: '2em' }}>{time}</div>\r\n                <div style={{ fontSize: '2em' }}>Score: {score}</div>\r\n                {!started ? <Button className=\"w-25\" variant=\"success\" onClick={() => setStarted(true)}>Start</Button> :\r\n                    <Button className=\"w-25\" variant=\"danger\" onClick={() => reset()}>Reset</Button>}\r\n            </Container>\r\n            <Container fluid className=\"d-flex flex-row flex-wrap\">\r\n                {grid.map((val, r) => val.map((v, c) => <Tile key={r + \",\" + c} emoji={v} r={r} c={c} clickTile={clickTile}/>))}\r\n            </Container>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nfunction Tile({ emoji, r, c, clickTile }) {\r\n\r\n    return (\r\n        <div className=\"tile d-flex justify-content-center align-items-center\" onClick={() => clickTile(r, c)}>\r\n            {emoji}\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}